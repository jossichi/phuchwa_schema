[
  {
    "_id": "users",
    "public": {
      "node_data": {
        "jsonSchema": {
          "_id": {
            "type": "string",
            "description": "ID duy nhất của người dùng do MongoDB tạo."
          },
          "user_id": {
            "type": "string",
            "unique": true,
            "description": "UUID duy nhất được tạo tự động."
          },
          "role": {
            "type": "string",
            "enum": ["nurse", "elderly"],
            "description": "Vai trò của người dùng: nurse (y tá) hoặc elderly (người cao tuổi)."
          },
          "email": {
            "type": "string",
            "description": "Email người dùng dùng để xác minh tài khoản."
          },
          "email_verified": {
            "type": "boolean",
            "default": false,
            "description": "Trạng thái xác minh email. Phải là true để hoàn tất đăng ký."
          },
          "hashed_password": {
            "type": "string",
            "nullable": true,
            "description": "Mật khẩu đã băm của người dùng (chỉ áp dụng cho elderly)."
          },
          "student_id": {
            "type": "string",
            "nullable": true,
            "description": "ID sinh viên của y tá (chỉ áp dụng cho nurse)."
          }
        },
        "jsonSample": [
          {
            "_id": "1",
            "user_id": "d2e9c02d-8450-406d-b3e5-bd8e7a0c889b",
            "role": "elderly",
            "email": "elderly1@example.com",
            "email_verified": true,
            "hashed_password": "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824",
            "card_id": null
          },

          {
            "_id": "3",
            "user_id": "f512ab7d-4c8c-4dcf-b9c2-1a1a2e3b5d6e",
            "role": "nurse",
            "email": "nurse1@example.com",
            "email_verified": true,
            "hashed_password": null,
            "student_id": "abcd1234efgh5678ijkl9012mnop3456"
          },
          {
            "_id": "4",
            "user_id": "bd15f4b0-c0f0-44e9-9cd9-0ed6db233445",
            "role": "nurse",
            "email": "nurse2@example.com",
            "email_verified": false,
            "hashed_password": null,
            "student_id": "mnop1234abcd5678ijkl9012efgh3456"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "email_verified": true,
                  "role": { "$in": ["nurse", "elderly"] }
                }
              },
              {
                "$addFields": {
                  "card_id": {
                    "$cond": {
                      "if": { "$eq": ["$role", "nurse"] },
                      "then": {
                        "$concat": ["CARD_", { "$substr": ["$user_id", 0, 8] }]
                      },
                      "else": null
                    }
                  },
                  "hashed_password": {
                    "$cond": {
                      "if": {
                        "$and": [
                          { "$eq": ["$role", "elderly"] },
                          { "$ne": ["$password", null] }
                        ]
                      },
                      "then": "bcrypt_hashed_password_placeholder",
                      "else": null
                    }
                  }
                }
              },
              {
                "$facet": {
                  "nurse_data": [
                    {
                      "$match": { "role": "nurse" }
                    },
                    {
                      "$lookup": {
                        "from": "cards",
                        "localField": "user_id",
                        "foreignField": "user_id",
                        "as": "card_info"
                      }
                    },
                    {
                      "$addFields": {
                        "card_id": { "$arrayElemAt": ["$card_info.card_id", 0] }
                      }
                    },
                    {
                      "$project": {
                        "_id": 1,
                        "user_id": 1,
                        "email": 1,
                        "student_id": 1,
                        "card_id": 1,
                        "role": 1
                      }
                    }
                  ],
                  "elderly_data": [
                    {
                      "$match": { "role": "elderly" }
                    },
                    {
                      "$project": {
                        "_id": 1,
                        "user_id": 1,
                        "email": 1,
                        "hashed_password": 1,
                        "role": 1
                      }
                    }
                  ]
                }
              }
            ],
            "purpose": "Pipeline for extracting data from users and splitting into nurse_data and elderly_data.",
            "data_input_from_node": "users",
            "data_output_to_node": ["nurses", "elderies"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "User Management",
        "author": "LOC",
        "version": "2.2",
        "year": "2025"
      }
    }
  },

  {
    "_id": "cards",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "CardData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "card_id": {
              "type": "string",
              "description": "ID duy nhất của thẻ (có thể là QR code hoặc mã NFC)."
            },
            "hashed_student_id": {
              "type": "string",
              "description": "băm ID sinh viên của nurse, liên kết với collection nurses."
            },
            "user_id": {
              "type": "string",
              "description": "ID người dùng elderly, liên kết với collection elderlies."
            },

            "public_key": {
              "type": "string",
              "description": "Khóa công khai để xác thực chữ ký số."
            },
            "private_key_encrypted": {
              "type": "string",
              "description": "Khóa riêng tư được mã hóa để bảo mật."
            },
            "qr_code_data": {
              "type": "string",
              "description": "Dữ liệu QR code chứa thông tin liên quan đến thẻ."
            }
          },
          "required": [
            "_id",
            "card_id",
            "hashed_student_id",
            "role",
            "public_key",
            "private_key_encrypted",
            "qr_code_data"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "card_001",
            "card_id": "QR789012",
            "hashed_student_id": "STU123456",
            "role": "nurse",
            "public_key": "0xabc...xyz",
            "private_key_encrypted": "encrypted_private_key_123",
            "qr_code_data": "{\"card_id\":\"QR789012\",\"student_id\":\"STU123456\",\"public_key\":\"0xabc...xyz\"}",
            "created_at": "2023-10-01T12:00:00Z"
          },
          {
            "_id": "card_002",
            "card_id": "QR987654",
            "user_id": "user_002",
            "role": "elderly",
            "public_key": "0xdef...uvw",
            "private_key_encrypted": "encrypted_private_key_456",
            "qr_code_data": "{\"card_id\":\"QR987654\",\"user_id\":\"user_002\",\"public_key\":\"0xdef...uvw\"}",
            "created_at": "2023-10-02T10:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "card_id": { "$exists": true }
                }
              },
              {
                "$addFields": {
                  "role": {
                    "$cond": {
                      "if": { "$ne": ["$student_id", null] },
                      "then": "nurse",
                      "else": "elderly"
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "cards",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for assigning roles based on student_id or user_id.",
            "data_input_from_node": "users",
            "data_output_to_node": "cards"
          }
        ]
      }
    }
  },

  {
    "_id": "nurses",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Nurse",
          "description": "Schema for the nurses collection, containing detailed information about nurses.",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của tài liệu do MongoDB tạo."
            },
            "user_id": {
              "type": "string",
              "description": "UUID duy nhất được tạo tự động để xác định người dùng."
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "Email của y tá, dùng để xác minh tài khoản."
            },
            "email_verified": {
              "type": "boolean",
              "default": false,
              "description": "Trạng thái xác minh email. Phải là true để hoàn tất đăng ký."
            },
            "student_id": {
              "type": "string",
              "nullable": true,
              "description": "ID sinh viên của y tá (chỉ áp dụng cho nurse)."
            },
            "card_id": {
              "type": "string",
              "nullable": true,
              "description": "ID duy nhất của thẻ (có thể là QR code hoặc mã NFC)."
            },
            "hashed_student_id": {
              "type": "string",
              "nullable": true,
              "description": "Băm ID sinh viên của y tá, liên kết với collection cards."
            },
            "public_key": {
              "type": "string",
              "nullable": true,
              "description": "Khóa công khai để xác thực chữ ký số."
            },
            "private_key_encrypted": {
              "type": "string",
              "nullable": true,
              "description": "Khóa riêng tư được mã hóa để bảo mật."
            },
            "qr_code_data": {
              "type": "string",
              "nullable": true,
              "description": "Dữ liệu QR code chứa thông tin liên quan đến thẻ."
            },
            "gender": {
              "type": "boolean",
              "nullable": true,
              "description": "Giới tính của y tá (true = male, false = female)."
            },
            "date_of_birth": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Ngày sinh của y tá (định dạng YYYY-MM-DD)."
            },
            "university": {
              "type": "string",
              "nullable": true,
              "description": "Tên trường đại học của y tá."
            },
            "faculty": {
              "type": "string",
              "nullable": true,
              "description": "Khoa học tập của y tá."
            },
            "degree_level": {
              "type": "string",
              "nullable": true,
              "description": "Cấp độ học vấn (ví dụ: Bachelor, Master, PhD)."
            },
            "enrollment_year": {
              "type": "number",
              "nullable": true,
              "description": "Năm nhập học của y tá."
            },
            "avatar_url": {
              "type": "string",
              "nullable": true,
              "description": "URL của ảnh đại diện đã băm."
            },
            "address": {
              "type": "string",
              "nullable": true,
              "description": "Địa chỉ thường trú của y tá."
            },
            "updated_at": {
              "$dateToString": {
                "format": "%Y-%m-%dT%H:%M:%SZ",
                "date": "$$NOW"
              }
            }
          },
          "required": [
            "_id",
            "user_id",
            "email",
            "email_verified",
            "updated_at"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "1",
            "user_id": "550e8400-e29b-41d4-a716-446655440000",
            "role": "nurse",
            "email": "nurse.jane@example.com",
            "email_verified": true,
            "student_id": "STU123456",
            "gender": true,
            "date_of_birth": "2000-05-15",
            "university": "Harvard University",
            "faculty": "Medicine",
            "degree_level": "Bachelor",
            "enrollment_year": 2018,
            "avatar_url": "https://example.com/avatar.jpg",
            "address": "123 Main Street, Boston, MA"
          }
        ]
      }
    },

    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "role": "nurse",
                  "email_verified": true
                }
              },
              {
                "$lookup": {
                  "from": "cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_info"
                }
              },
              {
                "$addFields": {
                  "card_id": { "$arrayElemAt": ["$card_info.card_id", 0] },
                  "hashed_student_id": {
                    "$arrayElemAt": ["$card_info.hashed_student_id", 0]
                  },
                  "public_key": {
                    "$arrayElemAt": ["$card_info.public_key", 0]
                  },
                  "private_key_encrypted": {
                    "$arrayElemAt": ["$card_info.private_key_encrypted", 0]
                  },
                  "qr_code_data": {
                    "$arrayElemAt": ["$card_info.qr_code_data", 0]
                  },
                  "hashed_avatar_url": {
                    "$cond": {
                      "if": { "$ne": ["$avatar_url", null] },
                      "then": {
                        "$toHex": {
                          "$hash": {
                            "input": "$avatar_url",
                            "algorithm": "sha256"
                          }
                        }
                      },
                      "else": null
                    }
                  },
                  "updated_at": {
                    "$dateToString": {
                      "format": "%Y-%m-%dT%H:%M:%SZ",
                      "date": "$$NOW"
                    }
                  }
                }
              },

              {
                "$project": {
                  "_id": 1,
                  "user_id": 1,
                  "email": 1,
                  "email_verified": 1,
                  "student_id": 1,
                  "card_id": 1,
                  "hashed_student_id": 1,
                  "public_key": 1,
                  "private_key_encrypted": 1,
                  "qr_code_data": 1,
                  "gender": 1,
                  "date_of_birth": 1,
                  "university": 1,
                  "faculty": 1,
                  "degree_level": 1,
                  "enrollment_year": 1,
                  "avatar_url": "$hashed_avatar_url",
                  "address": 1,
                  "updated_at": 1
                }
              },
              {
                "$merge": {
                  "into": "nurses",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for extracting nurse data from users and cards, then merging into the nurses collection.",
            "data_input_from_node": ["users", "cards"],
            "data_output_to_node": "nurses"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "User Management",
        "author": "LOC",
        "version": "2.2",
        "year": "2025"
      }
    }
  },

  {
    "_id": "elderies",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Elderly",
          "description": "Schema for the elderlies collection, containing detailed information about elderly users.",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của tài liệu do MongoDB tạo."
            },
            "user_id": {
              "type": "string",
              "description": "UUID duy nhất được tạo tự động để xác định người dùng."
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "Email của người cao tuổi, dùng để xác minh tài khoản."
            },
            "email_verified": {
              "type": "boolean",
              "default": false,
              "description": "Trạng thái xác minh email. Phải là true để hoàn tất đăng ký."
            },
            "hashed_password": {
              "type": "string",
              "nullable": true,
              "description": "Băm mật khẩu của người cao tuổi bằng thuật toán bcrypt."
            },

            "full_name": {
              "type": "string",
              "nullable": true,
              "description": "Họ và tên đầy đủ của người cao tuổi."
            },
            "gender": {
              "type": "boolean",
              "nullable": true,
              "description": "Giới tính của người cao tuổi (true = male, false = female)."
            },
            "date_of_birth": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Ngày sinh của người cao tuổi (định dạng YYYY-MM-DD)."
            },
            "permanent_address": {
              "type": "object",
              "nullable": true,
              "description": "Địa chỉ hộ khẩu thường trú.",
              "properties": {
                "street": { "type": "string", "nullable": true },
                "city": { "type": "string", "nullable": true },
                "country": { "type": "string", "nullable": true }
              }
            },
            "current_address": {
              "type": "object",
              "nullable": true,
              "description": "Địa chỉ hiện tại đang sinh sống.",
              "properties": {
                "street": { "type": "string", "nullable": true },
                "city": { "type": "string", "nullable": true },
                "country": { "type": "string", "nullable": true }
              }
            },
            "insurance_number": {
              "type": "string",
              "nullable": true,
              "description": "Mã số bảo hiểm xã hội/y tế."
            },
            "phone_number": {
              "type": "string",
              "nullable": true,
              "description": "Số điện thoại liên hệ."
            },
            "avatar_url": {
              "type": "string",
              "nullable": true,
              "description": "URL của ảnh đại diện đã băm."
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "Ngày cập nhật hồ sơ gần nhất (ISO 8601)."
            }
          },
          "required": ["_id", "user_id", "email", "email_verified"],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "6630fac2b9e1f2b7c3a1d9e4",
            "user_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "email": "elder.ly@example.com",
            "email_verified": true,
            "hashed_password": "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f",
            "public_key": "0xdef...uvw",
            "private_key_encrypted": "encrypted_private_key_456",
            "qr_code_data": "{\"card_id\":\"QR987654\",\"user_id\":\"user_002\",\"public_key\":\"0xdef...uvw\"}"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "role": "elderly",
                  "email_verified": true
                }
              },
              {
                "$lookup": {
                  "from": "cards",
                  "localField": "user_id",
                  "foreignField": "user_id",
                  "as": "card_info"
                }
              },
              {
                "$addFields": {
                  "hashed_password": {
                    "$cond": {
                      "if": { "$ne": ["$password", null] },
                      "then": "bcrypt_hashed_password_placeholder",
                      "else": null
                    }
                  },
                  "card_id": { "$arrayElemAt": ["$card_info.card_id", 0] },
                  "public_key": {
                    "$arrayElemAt": ["$card_info.public_key", 0]
                  },
                  "private_key_encrypted": {
                    "$arrayElemAt": ["$card_info.private_key_encrypted", 0]
                  },
                  "qr_code_data": {
                    "$arrayElemAt": ["$card_info.qr_code_data", 0]
                  },
                  "hashed_avatar_url": {
                    "$cond": {
                      "if": { "$ne": ["$avatar_url", null] },
                      "then": {
                        "$toHex": {
                          "$hash": {
                            "input": "$avatar_url",
                            "algorithm": "sha256"
                          }
                        }
                      },
                      "else": null
                    }
                  },
                  "updated_at": {
                    "$dateToString": {
                      "format": "%Y-%m-%dT%H:%M:%SZ",
                      "date": "$$NOW"
                    }
                  }
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "user_id": 1,
                  "email": 1,
                  "email_verified": 1,
                  "hashed_password": 1,
                  "public_key": 1,
                  "private_key_encrypted": 1,
                  "qr_code_data": 1,
                  "full_name": 1,
                  "gender": 1,
                  "date_of_birth": 1,
                  "permanent_address": 1,
                  "current_address": 1,
                  "insurance_number": 1,
                  "phone_number": 1,
                  "avatar_url": "$hashed_avatar_url",
                  "updated_at": 1
                }
              },
              {
                "$merge": {
                  "into": "elderies",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for extracting elderly data from users and cards, hashing the password, and merging into the elderlies collection.",
            "data_input_from_node": ["users", "cards"],
            "data_output_to_node": "elderies"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "User Management",
        "author": "LOC",
        "version": "2.2",
        "year": "2025"
      }
    }
  },

  {
    "_id": "login_collection",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "LogData",
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "ID duy nhất của phiên đăng nhập."
            },
            "user_id": {
              "type": "string",
              "description": "ID người dùng liên kết với collection users."
            },
            "role": {
              "type": "string",
              "enum": ["nurse", "elderly"],
              "description": "Vai trò của người dùng: nurse (y tá) hoặc elderly (người cao tuổi)."
            },
            "card_id": {
              "type": "string",
              "nullable": true,
              "description": "ID thẻ QR (chỉ áp dụng cho nurse)."
            },
            "signature": {
              "type": "string",
              "nullable": true,
              "description": "Chữ ký số (chỉ áp dụng cho nurse)."
            },
            "token": {
              "type": "string",
              "nullable": true,
              "unique": true,
              "description": "Token duy nhất cho mỗi phiên đăng nhập (chỉ áp dụng cho nurse)."
            },
            "login_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian đăng nhập."
            },
            "logout_time": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "Thời gian đăng xuất (null nếu chưa đăng xuất)."
            }
          },
          "required": ["_id", "card_id", "user_id", "login_time"],
          "additionalProperties": false
        }
      },
      "jsonSample": [
        {
          "_id": "log_001",
          "user_id": "uuid-987654321",
          "role": "elderly",
          "login_time": "2023-10-01T10:00:00Z",
          "logout_time": null
        },
        {
          "_id": "log_002",
          "user_id": "uuid-123456789",
          "role": "nurse",
          "card_id": "QR789012",
          "signature": "signature_abc123",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "login_time": "2023-10-01T12:00:00Z",
          "logout_time": null
        }
      ]
    },
    "private": {
      "node_function": {
        "edge": [
          [
            {
              "$match": {
                "email": "example@example.com",
                "hashed_password": "hashed_password_123"
              }
            },
            {
              "$lookup": {
                "from": "users",
                "localField": "user_id",
                "foreignField": "user_id",
                "as": "user_data"
              }
            },
            {
              "$addFields": {
                "isLoggedIn": true,
                "login_time": "$$NOW"
              }
            },
            {
              "$merge": {
                "into": "login_collection",
                "on": "user_id",
                "whenMatched": "merge",
                "whenNotMatched": "insert"
              }
            }
          ],
          [
            {
              "$match": {
                "card_id": "QR789012",
                "signature": "signature_abc123"
              }
            },
            {
              "$lookup": {
                "from": "cards",
                "localField": "card_id",
                "foreignField": "card_id",
                "as": "card_data"
              }
            },
            {
              "$lookup": {
                "from": "users",
                "localField": "user_id",
                "foreignField": "user_id",
                "as": "user_data"
              }
            },
            {
              "$addFields": {
                "is_authenticated": {
                  "$cond": {
                    "if": {
                      "$and": [
                        { "$eq": ["$card_data.public_key", "0xabc...xyz"] },
                        { "$eq": ["$user_data.role", "nurse"] }
                      ]
                    },
                    "then": true,
                    "else": false
                  }
                },
                "token": "generated_login_token",
                "login_time": "$$NOW"
              }
            },
            {
              "$merge": {
                "into": "login_collection",
                "on": "user_id",
                "whenMatched": "merge",
                "whenNotMatched": "insert"
              }
            }
          ]
        ]
      }
    }
  },

  {
    "_id": "test_attempts",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "TestAttemptData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "attempt_id": { "type": "string" },
            "questions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "question": { "type": "string" },
                  "difficulty": {
                    "type": "string",
                    "enum": ["easy", "medium", "hard"]
                  },
                  "options": {
                    "type": "array",
                    "minItems": 4,
                    "maxItems": 4,
                    "items": {
                      "type": "string"
                    }
                  },
                  "correct_answer": { "type": "string" }
                },
                "required": [
                  "question",
                  "difficulty",
                  "options",
                  "correct_answer"
                ],
                "additionalProperties": false
              }
            },

            "timestamp": { "type": "string", "format": "date-time" }
          },
          "required": ["_id", "attempt_id", "questions", "timestamp"],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "test_attempt_001",
            "attempt_id": "attempt_001",
            "questions": [
              {
                "question": "Điều gì là nguyên nhân chính gây ra sốc phản vệ?",
                "difficulty": "hard",
                "options": [
                  "Viêm phổi",
                  "Phản ứng dị ứng nghiêm trọng",
                  "Nhiễm trùng huyết",
                  "Suy tim"
                ],
                "correct_answer": "Phản ứng dị ứng nghiêm trọng",
                "user_answer": "Phản ứng dị ứng nghiêm trọng"
              },
              {
                "question": "Loại thuốc nào thường được sử dụng đầu tiên trong trường hợp ngừng tim?",
                "difficulty": "medium",
                "options": [
                  "Adrenaline",
                  "Atropine",
                  "Amiodarone",
                  "Lidocaine"
                ],
                "correct_answer": "Adrenaline",
                "user_answer": "Adrenaline"
              },
              {
                "question": "Kỹ thuật CPR tiêu chuẩn yêu cầu tỷ lệ ép ngực là bao nhiêu lần mỗi phút?",
                "difficulty": "easy",
                "options": [
                  "60-80 lần",
                  "80-100 lần",
                  "100-120 lần",
                  "120-140 lần"
                ],
                "correct_answer": "100-120 lần",
                "user_answer": "100-120 lần"
              },
              {
                "question": "Triệu chứng nào sau đây không phải là dấu hiệu của đột quỵ?",
                "difficulty": "medium",
                "options": [
                  "Đau ngực",
                  "Liệt nửa người",
                  "Khó nói",
                  "Mất thăng bằng"
                ],
                "correct_answer": "Đau ngực",
                "user_answer": "Đau ngực"
              },
              {
                "question": "Điều nào sau đây là chức năng chính của hệ bạch huyết?",
                "difficulty": "hard",
                "options": [
                  "Vận chuyển oxy",
                  "Bảo vệ cơ thể khỏi nhiễm trùng",
                  "Điều hòa huyết áp",
                  "Giảm cholesterol"
                ],
                "correct_answer": "Bảo vệ cơ thể khỏi nhiễm trùng",
                "user_answer": "Bảo vệ cơ thể khỏi nhiễm trùng"
              }
            ],
            "score": 5,
            "timestamp": "2023-10-01T12:00:00Z"
          }
        ]
      }
    },

    "personal": {
      "node_info": {
        "name": "Test Attempt Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "test_results",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "TestResultData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "attempt_id": { "type": "string" },
            "total_questions": { "type": "integer", "minimum": 1 },
            "correct_answers": { "type": "integer", "minimum": 0 },
            "score": { "type": "number", "minimum": 0, "maximum": 100 },
            "timestamp": { "type": "string", "format": "date-time" },
            "question_details": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "question": { "type": "string" },

                  "options": {
                    "type": "array",
                    "minItems": 4,
                    "maxItems": 4,
                    "items": { "type": "string" }
                  },
                  "correct_answer": { "type": "string" },
                  "user_answer": { "type": "string" },
                  "is_correct": { "type": "boolean" }
                },
                "required": [
                  "question",
                  "options",
                  "correct_answer",
                  "user_answer",
                  "is_correct"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": [
            "_id",
            "attempt_id",
            "total_questions",
            "correct_answers",
            "score",
            "timestamp",
            "question_details"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "result_001",
            "attempt_id": "attempt_001",
            "total_questions": 5,
            "correct_answers": 4,
            "score": 80,
            "timestamp": "2023-10-01T12:00:00Z",
            "question_details": [
              {
                "question": "Điều gì là nguyên nhân chính gây ra sốc phản vệ?",

                "options": [
                  "Viêm phổi",
                  "Phản ứng dị ứng nghiêm trọng",
                  "Nhiễm trùng huyết",
                  "Suy tim"
                ],
                "correct_answer": "Phản ứng dị ứng nghiêm trọng",
                "user_answer": "Phản ứng dị ứng nghiêm trọng",
                "is_correct": true
              },
              {
                "question": "Loại thuốc nào thường được sử dụng đầu tiên trong trường hợp ngừng tim?",

                "options": [
                  "Adrenaline",
                  "Atropine",
                  "Amiodarone",
                  "Lidocaine"
                ],
                "correct_answer": "Adrenaline",
                "user_answer": "Adrenaline",
                "is_correct": true
              }
            ]
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "questions": { "$exists": true }
                }
              },
              {
                "$addFields": {
                  "total_questions": { "$size": "$questions" },
                  "correct_answers": {
                    "$size": {
                      "$filter": {
                        "input": "$questions",
                        "as": "question",
                        "cond": {
                          "$eq": [
                            "$$question.user_answer",
                            "$$question.correct_answer"
                          ]
                        }
                      }
                    }
                  },
                  "question_details": {
                    "$map": {
                      "input": "$questions",
                      "as": "question",
                      "in": {
                        "question": "$$question.question",
                        "options": "$$question.options",
                        "correct_answer": "$$question.correct_answer",
                        "user_answer": "$$question.user_answer",
                        "is_correct": {
                          "$eq": [
                            "$$question.user_answer",
                            "$$question.correct_answer"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$addFields": {
                  "score": {
                    "$multiply": [
                      { "$divide": ["$correct_answers", "$total_questions"] },
                      100
                    ]
                  }
                }
              },
              {
                "$project": {
                  "_id": 1,
                  "attempt_id": 1,
                  "total_questions": 1,
                  "correct_answers": 1,
                  "score": 1,
                  "timestamp": 1,
                  "question_details": 1
                }
              },
              {
                "$merge": {
                  "into": "test_results",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for calculating and storing test results from test_attempts.",
            "data_input_from_node": "test_attempts",
            "data_output_to_node": "test_results"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Test Result Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "survey_attempts",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "SurveyAttemptData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "elderly_id": { "type": "string" },
            "attempt_id": { "type": "string" },
            "questions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "question": { "type": "string" },
                  "answer": { "type": "string" }
                }
              }
            },
            "verified": { "type": "boolean" },
            "timestamp": { "type": "string", "format": "date-time" }
          },
          "required": [
            "_id",
            "elderly_id",
            "attempt_id",
            "questions",
            "verified",
            "timestamp"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "attempt_001",
            "elderly_id": "elderly_001",
            "attempt_id": "ATM123456",
            "questions": [
              {
                "question": "How are you feeling today?",
                "answer": "Good"
              },
              {
                "question": "Have you taken your medication?",
                "answer": "Yes"
              }
            ],
            "verified": true,
            "timestamp": "2023-10-01T12:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "verified": true
                }
              },
              {
                "$merge": {
                  "into": "survey_attempts",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for updating survey attempts.",
            "data_input_from_node": "elderlies",
            "data_output_to_node": "matching"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Survey Attempt Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "service_logs",
    "public": {
      "node_data": {
        "jsonSchema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "ServiceLogData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "nurse_id": {
              "type": "string",
              "description": "ID của y tá chăm sóc (tham chiếu đến collection nurses)."
            },
            "elderly_id": {
              "type": "string",
              "description": "ID của người cao tuổi được chăm sóc (tham chiếu đến collection elderlies)."
            },
            "start_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian bắt đầu buổi chăm sóc."
            },
            "end_time": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian kết thúc buổi chăm sóc."
            },
            "location": {
              "type": "string",
              "description": "Địa chỉ hoặc khu vực chăm sóc."
            },
            "tasks_performed": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Danh sách các công việc đã thực hiện."
            },
            "vital_signs": {
              "type": "object",
              "properties": {
                "blood_pressure_systolic": {
                  "type": "number",
                  "description": "Huyết áp tâm thu (mmHg)."
                },
                "blood_pressure_diastolic": {
                  "type": "number",
                  "description": "Huyết áp tâm trương (mmHg)."
                },
                "pulse": {
                  "type": "number",
                  "description": "Nhịp tim (lần/phút)."
                },
                "respiratory_rate": {
                  "type": "number",
                  "description": "Nhịp thở (lần/phút)."
                },
                "temperature": {
                  "type": "number",
                  "description": "Nhiệt độ cơ thể (°C)."
                },
                "oxygen_saturation": {
                  "type": "number",
                  "description": "SpO2 – Nồng độ Oxy trong máu (%)."
                },
                "weight": {
                  "type": "number",
                  "nullable": true,
                  "description": "Cân nặng (kg)."
                },
                "height": {
                  "type": "number",
                  "nullable": true,
                  "description": "Chiều cao (cm)."
                }
              },
              "required": [
                "blood_pressure_systolic",
                "blood_pressure_diastolic",
                "pulse",
                "respiratory_rate",
                "temperature",
                "oxygen_saturation"
              ],
              "additionalProperties": false
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Thời gian tạo log."
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Lần chỉnh sửa cuối."
            }
          },
          "required": [
            "_id",
            "nurse_id",
            "elderly_id",
            "start_time",
            "end_time",
            "location",
            "tasks_performed",
            "vital_signs",
            "created_at",
            "updated_at"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "log_001",
            "nurse_id": "nurse_001",
            "elderly_id": "elderly_001",
            "start_time": "2023-10-01T08:00:00Z",
            "end_time": "2023-10-01T10:00:00Z",
            "location": "Quận 1, TP.HCM",
            "tasks_performed": [
              "Đo huyết áp",
              "Kiểm tra nhịp tim",
              "Hỗ trợ vận động"
            ],
            "vital_signs": {
              "blood_pressure_systolic": 120,
              "blood_pressure_diastolic": 80,
              "pulse": 72,
              "respiratory_rate": 16,
              "temperature": 36.8,
              "oxygen_saturation": 98,
              "weight": 65.5,
              "height": 160
            },
            "created_at": "2023-10-01T12:00:00Z",
            "updated_at": "2023-10-01T12:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "nurse_id": { "$exists": true },
                  "elderly_id": { "$exists": true }
                }
              },
              {
                "$addFields": {
                  "total_care_hours": {
                    "$divide": [
                      { "$subtract": ["$end_time", "$start_time"] },
                      3600000
                    ]
                  }
                }
              },
              {
                "$merge": {
                  "into": "service_logs",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for calculating total care hours and updating service logs.",
            "data_input_from_node": ["nurses", "elderlies"],
            "data_output_to_node": "service_logs"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Service Log Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "matching",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "MatchingData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "nurse_id": { "type": "string" },
            "elderly_id": { "type": "string" },
            "service_level": {
              "type": "string",
              "enum": ["basic", "standard", "premium"],
              "description": "Mức dịch vụ: basic (cơ bản), standard (tiêu chuẩn), premium (cao cấp)."
            },
            "isMatched": { "type": "boolean", "default": false },
            "matchedAt": { "type": "string", "format": "date-time" },
            "resetAt": { "type": "string", "format": "date-time" }
          },
          "required": [
            "_id",
            "nurse_id",
            "elderly_id",
            "service_level",
            "isMatched",
            "resetAt"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "match_001",
            "nurse_id": "nurse_001",
            "elderly_id": "elderly_001",
            "service_level": "basic",
            "isMatched": true,
            "matchedAt": "2023-10-01T12:00:00Z",
            "resetAt": "2023-10-02T08:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "isMatched": false,
                  "service_level": "basic"
                }
              },
              {
                "$lookup": {
                  "from": "test_results",
                  "localField": "nurse_id",
                  "foreignField": "attempt_id",
                  "as": "nurse_test_results"
                }
              },
              {
                "$addFields": {
                  "nurse_score": {
                    "$arrayElemAt": ["$nurse_test_results.score", 0]
                  }
                }
              },
              {
                "$lookup": {
                  "from": "service_logs",
                  "localField": "nurse_id",
                  "foreignField": "nurse_id",
                  "as": "nurse_service_logs"
                }
              },
              {
                "$addFields": {
                  "total_care_hours": {
                    "$sum": {
                      "$map": {
                        "input": "$nurse_service_logs",
                        "as": "log",
                        "in": {
                          "$divide": [
                            {
                              "$subtract": [
                                "$$log.end_time",
                                "$$log.start_time"
                              ]
                            },
                            3600000
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$match": {
                  "nurse_score": { "$gt": 70 },
                  "total_care_hours": { "$lt": 56 }
                }
              },
              {
                "$lookup": {
                  "from": "nurses",
                  "localField": "nurse_id",
                  "foreignField": "_id",
                  "as": "availableNurses"
                }
              },
              {
                "$lookup": {
                  "from": "elderlies",
                  "localField": "elderly_id",
                  "foreignField": "_id",
                  "as": "availableElderlies"
                }
              },
              {
                "$addFields": {
                  "matchedPairs": {
                    "$map": {
                      "input": "$availableElderlies",
                      "as": "elderly",
                      "in": {
                        "elderly_id": "$$elderly._id",
                        "nurse_id": {
                          "$arrayElemAt": [
                            {
                              "$filter": {
                                "input": "$availableNurses",
                                "as": "nurse",
                                "cond": {
                                  "$and": [
                                    {
                                      "$eq": [
                                        "$$nurse.isAvailableForMatching",
                                        true
                                      ]
                                    },
                                    {
                                      "$lte": ["$$nurse.distanceToElderly", 10]
                                    }
                                  ]
                                }
                              }
                            },
                            0
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "matching",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for updating matching status with basic service level conditions.",
            "data_input_from_node": [
              "test_attempts",
              "survey_attempts",
              "nurses",
              "elderlies",
              "test_results",
              "service_logs"
            ],
            "data_output_to_node": "transactions"
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Matching Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "transactions",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "TransactionData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "transaction_id": { "type": "string" },
            "nurse_id": { "type": "string" },
            "elderly_id": { "type": "string" },
            "amount": { "type": "number", "minimum": 0 },
            "service_level": {
              "type": "string",
              "enum": ["basic", "standard", "premium"]
            },
            "nurse_commission": { "type": "number", "minimum": 0 },
            "timestamp": { "type": "string", "format": "date-time" }
          },
          "required": [
            "_id",
            "transaction_id",
            "nurse_id",
            "elderly_id",
            "amount",
            "service_level",
            "timestamp"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "txn_001",
            "transaction_id": "TXN123456",
            "nurse_id": "nurse_001",
            "elderly_id": "elderly_001",
            "amount": 500,
            "service_level": "premium",
            "timestamp": "2023-10-01T12:00:00Z"
          },
          {
            "_id": "txn_002",
            "transaction_id": "TXN123457",
            "nurse_id": "nurse_002",
            "elderly_id": "elderly_002",
            "amount": 1000,
            "service_level": "standard",
            "timestamp": "2023-10-02T14:30:00Z"
          },
          {
            "_id": "txn_003",
            "transaction_id": "TXN123458",
            "nurse_id": "nurse_003",
            "elderly_id": "elderly_003",
            "amount": 200,
            "service_level": "basic",
            "timestamp": "2023-10-03T09:15:00Z"
          },
          {
            "_id": "txn_004",
            "transaction_id": "TXN123459",
            "nurse_id": "nurse_004",
            "elderly_id": "elderly_004",
            "amount": 2000,
            "service_level": "premium",
            "timestamp": "2023-10-04T16:45:00Z"
          },
          {
            "_id": "txn_005",
            "transaction_id": "TXN123460",
            "nurse_id": "nurse_005",
            "elderly_id": "elderly_005",
            "amount": 300,
            "service_level": "basic",
            "timestamp": "2023-10-05T11:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "service_level": {
                    "$in": ["basic", "standard", "premium"]
                  }
                }
              },
              {
                "$addFields": {
                  "nurse_commission": {
                    "$switch": {
                      "branches": [
                        {
                          "case": { "$eq": ["$service_level", "standard"] },
                          "then": { "$multiply": ["$amount", 0.1] }
                        },
                        {
                          "case": { "$eq": ["$service_level", "premium"] },
                          "then": { "$multiply": ["$amount", 0.15] }
                        }
                      ],
                      "default": 0
                    }
                  }
                }
              },
              {
                "$merge": {
                  "into": "transactions",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for updating transactions.",
            "data_input_from_node": "pricing",
            "data_output_to_node": ""
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Transaction Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "pricing",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "PricingData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "service_level": {
              "type": "string",
              "enum": ["basic", "standard", "premium"]
            },
            "elderly_benefits": { "type": "string" },
            "nurse_rewards": { "type": "number", "minimum": 0 },
            "price": { "type": "number", "minimum": 0 }
          },
          "required": [
            "_id",
            "service_level",
            "elderly_benefits",
            "nurse_rewards",
            "price"
          ],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "price_basic",
            "service_level": "basic",
            "elderly_benefits": "Chăm sóc cơ bản, theo dõi sức khỏe định kỳ.",
            "nurse_rewards": 100,
            "price": 500
          },
          {
            "_id": "price_standard",
            "service_level": "standard",
            "elderly_benefits": "Chăm sóc tiêu chuẩn, hỗ trợ y tế hàng ngày.",
            "nurse_rewards": 300,
            "price": 1000
          },
          {
            "_id": "price_premium",
            "service_level": "premium",
            "elderly_benefits": "Chăm sóc cao cấp, hỗ trợ y tế 24/7.",
            "nurse_rewards": 500,
            "price": 2000
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "service_level": {
                    "$in": ["basic", "standard", "premium"]
                  }
                }
              },
              {
                "$merge": {
                  "into": "pricing",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for managing pricing data.",
            "data_input_from_node": [],
            "data_output_to_node": ""
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "Pricing Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  },

  {
    "_id": "system",
    "public": {
      "node_data": {
        "jsonSchema": {
          "title": "SystemData",
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "logoutAllUsersAt": { "type": "string", "format": "date-time" },
            "currentSystemTime": { "type": "string", "format": "date-time" }
          },
          "required": ["_id", "logoutAllUsersAt", "currentSystemTime"],
          "additionalProperties": false
        },
        "jsonSample": [
          {
            "_id": "system_001",
            "logoutAllUsersAt": "2023-10-01T20:00:00Z",
            "currentSystemTime": "2023-10-01T18:00:00Z"
          }
        ]
      }
    },
    "private": {
      "node_function": {
        "edge": [
          {
            "pipeline": [
              {
                "$match": {
                  "currentSystemTime": {
                    "$gte": "logoutAllUsersAt"
                  }
                }
              },
              {
                "$set": {
                  "isLoggedIn": false,
                  "tokens": []
                }
              },
              {
                "$merge": {
                  "into": "users",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              },

              {
                "$lookup": {
                  "from": "matching",
                  "localField": "_id",
                  "foreignField": "_id",
                  "as": "matchingData"
                }
              },
              {
                "$unwind": {
                  "path": "$matchingData",
                  "preserveNullAndEmptyArrays": true
                }
              },
              {
                "$set": {
                  "matchingData.isMatched": false,
                  "matchingData.matchedAt": null,
                  "matchingData.resetAt": null
                }
              },
              {
                "$merge": {
                  "into": "matching",
                  "on": "_id",
                  "whenMatched": "merge",
                  "whenNotMatched": "insert"
                }
              }
            ],
            "purpose": "Pipeline for logging out all users and resetting matching data after 20:00.",
            "data_input_from_node": ["users", "matching"],
            "data_output_to_node": ["users", "matching"]
          }
        ]
      }
    },
    "personal": {
      "node_info": {
        "name": "System Management",
        "author": "LOC",
        "version": "2.0",
        "year": "2025"
      }
    }
  }
]
